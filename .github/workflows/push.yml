name: Publish Docker image
on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write
  issues: write
  statuses: write
  checks: write
  deployments: write
  repository-projects: write
jobs:
  push_to_registry:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Set releaase
        run: |
          echo "REPO=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.sha }}" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Yaml linting
        uses: github/super-linter@v5
        with:
          linter: 'yaml'
          run_linter: true
          fail_on_error: true
          fail_on_warning: false
          config_file: .github/linter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push api-server Docker image
        uses: docker/build-push-action@v3
        with:
          context: api-server
          file: api-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/${{ env.REPO }}/api-server:${{ env.RELEASE_VERSION }}

      - name: Build and push static-webserver Docker image
        uses: docker/build-push-action@v3
        with:
          context: static-webserver
          file: static-webserver/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/${{ env.REPO }}/static-webserver:${{ env.RELEASE_VERSION }}

      - name: Build and push reverse-proxy Docker image
        uses: docker/build-push-action@v3
        with:
          context: reverse-proxy
          file: reverse-proxy/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/${{ env.REPO }}/reverse-proxy:${{ env.RELEASE_VERSION }}

      - name: Test image
        run: |
          export VERSION=${{ env.RELEASE_VERSION }}
          docker compose -f compose.yml up -d

      - name: Wait for containers to be healthy
        run: |
          echo "Waiting for containers to be healthy..."
          for i in {1..10}; do
            if docker inspect --format='{{json .State.Health.Status}}' reverse-proxy | grep -q '"healthy"'; then
              echo "reverse-proxy is healthy"
              break
            fi
            sleep 5
          done

          for i in {1..10}; do
            if docker inspect --format='{{json .State.Health.Status}}' static-webserver | grep -q '"healthy"'; then
              echo "static-webserver is healthy"
              break
            fi
            sleep 5
          done

          for i in {1..10}; do
            if docker inspect --format='{{json .State.Health.Status}}' api-server1 | grep -q '"healthy"'; then
              echo "api-server1 is healthy"
              break
            fi
            sleep 5
          done

          for i in {1..10}; do
            if docker inspect --format='{{json .State.Health.Status}}' api-server2 | grep -q '"healthy"'; then
              echo "api-server2 is healthy"
              break
            fi
            sleep 5
          done

      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here
          # For example, you can use curl to check if the services are up and running
          echo "Testing reverse-proxy..."
          curl -f https://localhost/health -k || exit 1
          echo "Testing api-server..."
          curl -f https://localhost/api/health -k || exit 1
          echo "Testing static-webserver..."
          curl -f https://localhost -k || exit 1