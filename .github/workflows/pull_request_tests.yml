
name: Publish Docker image
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write
  issues: write
  statuses: write
  checks: write
  deployments: write
  repository-projects: write

jobs:
  set_env:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.setenv.outputs.repo }}
      release: ${{ steps.setenv.outputs.release }}
    steps:
      - name: Set environment variables
        id: setenv
        run: |
          echo "repo=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
          echo "release=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    needs: set_env
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - run: pip install pylint yamllint
      - run: pylint api-server
      - run: python3 -m yamllint -d relaxed $(find . -name "*.yml" -o -name "*.yaml")
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: api-server/Dockerfile
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: reverse-proxy/Dockerfile
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: static-webserver/Dockerfile
      - uses: sjafferali/docker-compose-lint-action@v0.1.2
        with:
          compose-file: './compose.yml'

  build_api:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: api-server
          file: api-server/Dockerfile
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ needs.set_env.outputs.repo }}/api-server:${{ needs.set_env.outputs.release }}

  build_static:
    runs-on: ubuntu-latest
    needs: [set_env, lint]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: static-webserver
          file: static-webserver/Dockerfile
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ needs.set_env.outputs.repo }}/static-webserver:${{ needs.set_env.outputs.release }}

  build_proxy:
    runs-on: ubuntu-latest
    needs: [set_env, lint]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: reverse-proxy
          file: reverse-proxy/Dockerfile
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ needs.set_env.outputs.repo }}/reverse-proxy:${{ needs.set_env.outputs.release }}

  integration_test:
    runs-on: ubuntu-latest
    needs: [build_api, build_static, build_proxy]
    steps:
      - uses: actions/checkout@v3
      - run: |
          export VERSION=${{ github.sha }}
          docker compose -f compose.yml up -d
      - run: |
          echo "Waiting for containers to be healthy..."
          for service in reverse-proxy static-webserver api-server1 api-server2; do
            for i in {1..10}; do
              if docker inspect --format='{{json .State.Health.Status}}' $service | grep -q '"healthy"'; then
                echo "$service is healthy"
                break
              fi
              sleep 5
            done
          done
      - run: |
          echo "Running tests..."
          curl -f https://localhost/health -k || exit 1
          curl -f https://localhost/api/health -k || exit 1
          curl -f https://localhost -k || exit 1
